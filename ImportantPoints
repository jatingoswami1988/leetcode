temp = str.substring(0, i) + str.substring(i + 1);
https://www.youtube.com/watch?v=oiPT284NzSs - System Design Book My Show/ Flash Sale / Meeting Rooms booking / Distributed Transactions	

// Read Overlapping problem and Recursion technique in takeUForward
// Time complexity in each example of striver
// in recursion if min is required then -> return Math.min( , );
// in recursion if max is required then -> return Math.max( , );
// in recursion total count is required then -> return f(i,j) + f(i,j) -> depending upon the question.


/// Try all ways and find min or max - Recursion
/// Express in terms of index i,j

https://github.com/keshavsethi/LLD/blob/main/BookMyShow/BMSService.java

BitManipulation
Puzzles

Logic -

Array - Two Pointer,Sliding Window,PriorityQueue,TempArray , If Array sorted (BinarySearch or Two Pointers)
PriorityQueue
Custom Class

Frameworks - 

Spring Retry Example

#######################

To Revise Again
https://leetcode.com/problems/single-number/ --> Try XOR Operation method also
560,556,556
https://leetcode.com/problems/minimum-number-of-swaps-to-make-the-string-balanced/
https://leetcode.com/problems/count-the-number-of-fair-pairs/

Pending -

https://leetcode.com/problems/rearrange-array-elements-by-sign/description/

#######################

Fizzbuzz problem.
Segemented Tree
Self Balanced Tree - AVL Tree
Nuember Theory - Basics
DP on Tree
Fenwick Tree
Expected Value Question
SOS Dp
Heavy Light Decomposition
Fourier Theoram
Skewed Tree
segmented tree
https://www.geeksforgeeks.org/segment-tree-set-1-range-minimum-query/

######################
All Problems :-
Leetcode Problems - https://www.linkedin.com/feed/update/urn:li:activity:7067002527166181377/

DynamicProblem :-
https://leetcode.com/discuss/general-discussion/1050391/Must-do-Dynamic-programming-Problems-Category-wise
https://leetcode.com/discuss/general-discussion/491522/dynamic-programming-questions-thread
https://leetcode.com/tag/dynamic-programming/discuss/1000929/Solved-all-dynamic-programming-(dp)-problems-in-7-months.
Dynamic Programming - https://www.geeksforgeeks.org/top-20-dynamic-programming-interview-questions/?ref=lbp

String :- 
https://leetcode.com/discuss/interview-question/2001789/collections-of-important-string-questions-pattern

##########################

HLD and LLD

https://astikanand.github.io/techblogs/high-level-system-design/design-bookmyshow

Distributed Caching and MessagingQueue
Netflix System Design > https://workat.tech/system-design/article/best-engineering-blogs-articles-videos-system-design-tvwa05b8bzzr
Elevator System design > https://leetcode.com/discuss/interview-question/124660/design-an-Elevator
LRU cache with Thread safe > https://github.com/kswap/LRU-Cache
https://www.codekarle.com/
Web Crawler - https://github.com/donnemartin/system-design-primer/blob/master/solutions/system_design/web_crawler/README.md
https://www.geeksforgeeks.org/must-do-coding-questions-for-companies-like-amazon-microsoft-adobe/
https://workat.tech/system-design/article/best-engineering-blogs-articles-videos-system-design-tvwa05b8bzzr
https://leetcode.com/discuss/interview-question/124660/design-an-Elevator
LRU cache with Thread safe > https://github.com/kswap/LRU-Cache
System Design > https://www.codekarle.com/
Web Crawler > https://github.com/donnemartin/system-design-primer/blob/master/solutions/system_design/web_crawler/README.md
System Design : Distributed Database System Key Value Store - https://www.youtube.com/watch?v=rnZmdmlR-2M
DistributedCache - https://www.youtube.com/watch?v=fowDzrMa-Mo
                   https://ravisystemdesign.substack.com/p/interview-prep-designing-a-distributed
                   https://www.youtube.com/watch?v=iuqZvajTOyA
                   https://datamify.com/spring/distributed-cache-in-spring-boot-application-with-redis/
https://github.com/keshavsethi/LLD
https://medium.com/@narengowda/bookmyshow-system-design-e268fefb56f5

Thread safe - LRU make lru thread safe in java

###########################

Microservice Pattern

 Tailored backend for each user interface.
 Gradual replacement of monolithic systems.
 Single-entry point to microservices system.
 Locate services dynamically in a network.
 Prevent cascaded failure, enable recovery.
Isolate failures and prevent system-wide impact.
 Reattempt operation in case of failure.
 Application extension with helper services.
 Maintain data consistency across microservices.
Separate read and write operations.
 Orchestrates multiple services, aggregates results.
 Externalize configurations for environmental consistency.


############################

75 Questions Grind
https://lnkd.in/d_uWUggG

Famous 75 Questions of Leetcode
https://lnkd.in/d2ZxbtRw

Tree - https://leetcode.com/discuss/study-guide/1337373/tree-question-pattern-2021-placement
	   https://leetcode.com/discuss/study-guide/1212004/Binary-Trees-study-guide

###########################

https://leetcode.com/discuss/general-discussion/1050391/Must-do-Dynamic-programming-Problems-Category-wise
https://leetcode.com/discuss/study-guide/1308617/Dynamic-Programming-Patterns
Make Sure these all problems and their concepts, logic, Pattern Everything is on your Fingertip before the Interview.

//// count no of ways or best way | min output or max output - Recursion.
/// Represent the problem in terms of index
/// do possible stuffs in that index
/// count no of ways  - Sum all stuffs
/// min - find min of all stuffs
/// max - find max of all stuffs

 Part 1: DP on 1D Array

DP 1. Phebonachi Number
DP 2. Climbing Stairs 
DP 3. Frog Jump 
DP 4. Frog Jump with K Distance 
DP 5. Maximum Sum of Non-Adjacent Elements House Robber - done
DP 6. House Robber 2 - done

 Part 2: 2D/3D DP and DP on Grids

DP 7. Ninja's Training - 
DP 8. Grid Unique Paths - Done
DP 9. Unique Paths 2 and 3 - Done
DP 10. Minimum Path Sum in Grid - Done
DP 11. Triangle Fixed Starting Point and Variable Ending Point DP on GRIDS - Done
DP 12. Minimum Maximum Falling Path Sum Variable Starting and Ending Points DP on Grids
DP 13. Cherry Pickup II 3D DP

 Part 3: DP on Subsequences

DP 14. Subset Sum Equals to Target - Done
DP 15. Partition Equal Subset Sum - Done (Pick and dont pick logic with half sum) 
Dp 16. Partition A Set Into Two Subsets With Minimum Absolute Sum Difference - (Tug of war problem) - + Recursion Another way done +  DP pending (https://www.geeksforgeeks.org/partition-a-set-into-two-subsets-such-that-the-difference-of-subset-sums-is-minimum/)
DP 17. Counts Subsets with Sum K - (coin change problem) - // arr[] = {1, 2, 3, 3}, X = 6  All the possible subsets are {1, 2, 3}, {1, 2, 3} and {3, 3} --> ( Add pick + Dont pick )
DP 18. Count Partitions With Given Difference 
DP 19. 0/1 Knapsack Single Array (https://www.geeksforgeeks.org/0-1-knapsack-problem-dp-10/)
DP 20. Minimum Coins ---> Combinational Sum problem  https://www.geeksforgeeks.org/find-minimum-number-of-coins-that-make-a-change/
DP 21. Target Sum DP on Subsequences - 1)Just return true/false or print the subset as well using recursion and dp (https://www.geeksforgeeks.org/perfect-sum-problem-print-subsets-given-sum/)
DP 22. Coin Change 2 infinite Supply Problems DP on Subsequences - Combinatory Problem https://www.geeksforgeeks.org/coin-change-dp-7/
DP 23. Unbounded Knapsack 1-D Array https://takeuforward.org/data-structure/unbounded-knapsack-dp-23/
DP 24. Rod Cutting Problem 1D Array - Unbound Knapsack - Read Leetcode solution

 Part 4: DP on Strings

DP 25 Longest Common Subsequence - Done
DP 26. Print_Longest_Common_Subsequence - Done
DP 27._Longest_Common_Substring - Done
DP 28._Longest_Palindromic_Subseque - Done
DP 29._Minimum_Insertions_to_Make_String_Palindrome - Done
DP 30._Minimum_Insertions_Deletions_to_Convert_String_A_to_String_B - Done
DP 31._Shortest_Common_Supersequence
DP 32. Distinct_Subsequences_1D_Array - Done
DP 33 Edit_Distance - Done
DP 34._Wildcard_Matching - Done

Part 5: DP on Stocks

DP 35._Best_Time_to_Buy_and_Sell_Stock - done
DP 36._Buy_and_Sell_Stock_II-done
DP 37._Buy_and_Sell_Stocks_III-done
DP 38. Buy and Stock Sell IV - done
DP 39. Buy and Sell Stocks With Cooldown - done
DP 40. Buy and Sell Stocks With Transaction Fee - done

Part 6: DP on LIS ( Longest Increasing Subsequence )

DP 41. Longest Increasing Subsequence - done
DP 42. Printing Longest Increasing Subsequence - done
DP 44. Largest Divisible Subset Longest Increasing Subsequence ---> Same logic as LIS use divisibility factor --> Sort the array {1,4,7,8,16}
DP 45. Longest String Chain Longest Increasing Subsequence LIS ----> Same logic if difference is one character ---> Difference of one character
DP 46. Longest Bitonic Subsequence LIS --> Longest increasing and decreasing sequence. Just be increase or decrease as well --> 
				LIS from originals array and reverse and add the sum - 1
DP 47. Number of Longest Increasing Subsequences

Part 7: MCM (Matrix Chain Multiplication) DP | Partition DP

DP 48. Matrix Chain Multiplication MCM Partition - Done
DP 49. Matrix Chain Multiplication - Done
DP 50. Minimum Cost to Cut the Stick - Done
DP 51. Burst Balloons Partition DP Interactive G-Meet Session Update
DP 52. Evaluate Boolean Expression to True Partition DP
DP 53. Palindrome Partitioning - II Front Partition 
DP 54. Partition Array for Maximum Sum Front Partition 

Part 8: DP on Squares

DP 55. Maximum Rectangle Area with all 1's - Done
DP 56. Count Square Submatrices with All Ones - Done

###########################

System design basics: https://bit.ly/3SuUR0Y
Horizontal and vertical scaling: https://bit.ly/3slq5xh
 Load balancing and Message queues: https://bit.ly/3sp0FP4
High-level design and low-level design, Consistent Hashing, Monolithic and Microservices architecture: https://bit.ly/3DnEfEm
 Caching, Indexing, Proxies: https://bit.ly/3SvyVDc
 Networking, How Browsers work, Content Network Delivery ( CDN): https://bit.ly/3TOHQRb
 Database Sharding, CAP Theorem, Database schema Design: https://bit.ly/3CZtfLN
 Concurrency, API, Components + OOP + Abstraction : https://bit.ly/3sqQrhj
 Estimation and Planning, Performance: https://bit.ly/3z9dSPN
 Map Reduce, Patterns, and Microservices: https://bit.ly/3zcsfmv
 SQL vs NoSQL and Cloud: https://bit.ly/3z8Aa49
 Most Popular System Design Questions: https://bit.ly/3Dp40Ux
System Design Case Studies
 Design Netflix: https://bit.ly/3GrAUG1
 Design Reddit: https://bit.ly/3OgGJrL
 Design Messenger App : https://bit.ly/3DoAAXi
 Design Instagram: https://bit.ly/3BFeHlh
 Design Dropbox: https://bit.ly/3SnhncU
 Design Youtube: https://bit.ly/3dFyvvy
 Design Tinder: https://bit.ly/3Mcyj3X
 Design Yelp: https://bit.ly/3E7IgO5
 Design Whatsapp: https://bit.ly/3M2GOhP
 Design URL shortener : https://bit.ly/3xP078x
 Design Amazon Prime Video: https://bit.ly/3hVpWP4
 Design Twitter: https://bit.ly/3qIG9Ih
 Design Uber: https://bit.ly/3fyvnlT
 Design TikTok : https://bit.ly/3UUlKxP
 Design Facebook's Newsfeed: https://bit.ly/3RldaW7
 Design Web Crawler: https://bit.ly/3DPZTBB
 Design API Rate Limiter: https://bit.ly/3BIVuh7
All solved case studies: https://bit.ly/3dCG1rc
 System Design Important terms - https://bit.ly/3Om9d3H
 Most Popular System Design Questions: https://bit.ly/3E9oH7K
 Complete System Design Basics Series: https://bit.ly/3rG1cfr

#################################################################

25 concepts that make System Design easier:
1. Scalability - How will your system handle growth? Vertical or Horizontal scaling?
2. Latency and Throughput - Essential performance measures.
3. Database design - SQL or NoSQL? Understand their strengths and weaknesses.
4. Indexing - Understand database indexes and their performance implications.
5. Load Balancing - Understand different algorithms and their use cases.
6. Caching - Caching can dramatically increase the speed of data retrieval. Know different strategies, benefits and trade-offs.
7. Networking Basics - TCP/IP, HTTP vs HTTPS, UDP, DNS lookups.
8. Microservices Architecture - Learn how to decompose a large system into manageable parts.
9. Data Sharding - As your data grows, how will you distribute it?Understand different sharding techniques and their trade-offs.
10. CAP Theorem - Consistency, Availability, and Partition Tolerance - you can only pick two.
11. System Interfaces - API design and best practices.
12. Redundancy and Failover - Learn how to design a highly available system.
13. Message Queues - Asynchronous communication, ensuring reliable data transfer.
14. Data Replication - Storing duplicate data across multiple machines to increase reliability and availability.
15. Concurrency - Handling multiple requests simultaneously.
16. Multithreading - The art of handling multiple threads and synchronization.
17. Rate Limiting - Controlling request rates, why, and how.
18. Consensus Algorithms - Get familiar with Raft, Paxos, and more.
19. Idempotency - Repeated requests should yield the same result.
20. REST vs RPC - When and why to use them.
21. Polling vs Push mechanism - Differences and their appropriate usage.
22. Heartbeats - Regular signals sent between machines to indicate network connectivity and system health.
23. Eventual vs Strong Consistency - Trade-offs and use cases.
24. Logging and Monitoring - Their significance in maintaining a healthy system.
25. Circuit Breakers - Learn how they can prevent system failures.

#############################################################

1. Course Schedule: https://lnkd.in/dx3hUnJ8
2. Number of Islands: https://lnkd.in/dEk_NYPh
3. Clone Graph: https://lnkd.in/d5RZS5AW
4. Word Ladder: https://lnkd.in/dg8DvnDb
5. Pacific Atlantic Water Flow: https://lnkd.in/d_F5gWRD
6. Cheapest Flights Within K Stops: https://lnkd.in/dxq3PspT
7. Network Delay Time: https://lnkd.in/dNE2x2w8
8. All Paths from Source Lead to Destination: https://lnkd.in/dmQYvrqR
9. Redundant Connection: https://lnkd.in/d9cVv-Tk
10. Minimum Height Trees: https://lnkd.in/dycY2kqr
11. Evaluate Division: https://lnkd.in/dqBnAMRz
12. Graph Valid Tree: https://lnkd.in/djaqHMWA
13. Find Eventual Safe States: https://lnkd.in/dAe6wVTa
14. Shortest Path in Binary Matrix: https://lnkd.in/df24-eQT
15. Reconstruct Itinerary: https://lnkd.in/dWiAf63S
16. Find the City With the Smallest Number of Neighbors at a Threshold Distance: https://lnkd.in/dMFFHpGn
17. Find the Town Judge: https://lnkd.in/dRzk_nfX
18. Critical Connections in a Network: https://lnkd.in/dTTJ88Ke
19. Number of Operations to Make Network Connected: ]https://lnkd.in/dNqX7B6W
20. Path with Maximum Probability: https://lnkd.in/d22u-WDU
21. Find the Shortest Superstring: https://lnkd.in/d64Qz7fc
22. Minimum Cost to Connect Two Groups of Points: https://lnkd.in/ds_5Ay4N
23. Number of Ways to Reorder Array to Get Same BST: https://lnkd.in/diaRmGJi
24. Path with Minimum Effort: https://lnkd.in/dFmZGxBW
25. Count Subtrees With Max Distance Between Cities: https://lnkd.in/d2ErWV5c

#############################################################

Two Sum problem : https://lnkd.in/d8z9YqhN
 Trapping Water : https://lnkd.in/d63FvNtv
 Next Permutation : https://lnkd.in/dstQYJzv
 Valid Palindrome : https://lnkd.in/dxqJkdKe
 Reverse String : https://lnkd.in/dVqnrj_n
 Reverse Vowels of a String : https://lnkd.in/dZF3Khb9
 Valid Palindrome II : https://lnkd.in/dcyRTzcY
 Reverse Only Letters : https://lnkd.in/dZF3Khb9
 Remove Element : https://lnkd.in/dMX6VUta
 Sort Colors : https://lnkd.in/dMrd47Eu
 Flipping an Image : https://lnkd.in/d8fHeViF
 Squares of a Sorted Array : https://lnkd.in/djqgw998
 Sort Array By Parity : https://lnkd.in/dxd8qjau
 Sort Array By Parity II : https://lnkd.in/dBEndarU
 Pancake Sorting : https://lnkd.in/d9tgnG9c
 Reverse Prefix of Word : https://lnkd.in/dEQxMYJW
 Reverse String II : https://lnkd.in/dyAFikRg
 Reverse Words in a String : https://lnkd.in/d_DA9jcN
 Reverse Words in a String III : https://lnkd.in/dA6P_PpZ
 3Sum problem : https://lnkd.in/dzNdzt6H
 3Sum Closest : https://lnkd.in/defwUKwg
 Remove Duplicates from Sorted Array : https://lnkd.in/dyfazJgR
 Remove Element : https://lnkd.in/dMX6VUta
 Container With Most Water : https://lnkd.in/dVmRBP3C
 Minimum Size Subarray Sum : https://lnkd.in/dmD6SC3n

################################################################
Here are Top 50 problems that most improved my DSA and problem solving skills:

1. Furthest Building You Can Reach: https://lnkd.in/gup4SjT3

2. Maximum Points You Can Obtain from Cards: https://lnkd.in/g46uuRRY

3. Trim a Binary Search Tree: https://lnkd.in/ggZjxhfB

4. Car Pooling: https://lnkd.in/gHYDuBB3

5. Two Sum: https://lnkd.in/gvmrSsPf

6. Container With Most Water: https://lnkd.in/g3wzbAdt

7. Distribute Coins in Binary Tree: https://lnkd.in/gB5jwdYP

8. Merge Two Sorted Lists: https://lnkd.in/gWiNc4iT

9. Merge k Sorted Lists: https://lnkd.in/gC7XdcYn

10. Group Anagrams: https://lnkd.in/g2ZvQCMt

11. Merge Intervals: https://lnkd.in/gj7mKaC7

12. Rotting Oranges: https://lnkd.in/gQPtGtBE

13. Diameter of Binary Tree: https://lnkd.in/gpgf_bxQ

14. Top K Frequent Elements: https://lnkd.in/gQ7YbpyG

15. Sliding Window Maximum: https://lnkd.in/gPxyzZte

16. Number of Islands: https://lnkd.in/g4SuhAKZ

17. Linked List Cycle II: https://lnkd.in/gvgpiPeb

18. Jump Game II: https://lnkd.in/gi2e6HwH

19. Maximum Subarray: https://lnkd.in/gvXACXww

20. Longest Increasing Path in a Matrix: https://lnkd.in/g832N7kP

21. Trapping Rain Water: https://lnkd.in/gyj3KRzF

22. Reverse Linked List: https://lnkd.in/gFdtXjpp

23. Course Schedule II: https://lnkd.in/g-zYyETQ

24. Sort Colors: https://lnkd.in/gkdR3wW8

25. Implement Trie (Prefix Tree): https://lnkd.in/gAH5a-7M

26. Move Zeroes: https://lnkd.in/g-zKby4V

27. Daily Temperatures: https://lnkd.in/gEDjGxz8

28. Insert Delete GetRandom O(1): https://lnkd.in/gCNhaage

29. Longest Increasing Subsequence: https://lnkd.in/gQa8vA23

30. Populate Next Right Pointers In Each Node II: https://lnkd.in/g_NM2kcb

31. Binary Tree Maximum Path Sum: https://lnkd.in/gsQNe33B

32. Longest Substring Without Repeating Characters: https://lnkd.in/gGUhV_Cm

33. Combination Sum: https://lnkd.in/gE3rVnJi

34. Unique Binary Search Trees II: https://lnkd.in/g8n6wZvP

35. First Bad Version: https://lnkd.in/gm4NqwNY

36. Word Search II: https://lnkd.in/geXH9tc3

37. Task Scheduler: https://lnkd.in/g2JF77Fs

38. Bus Routes: https://lnkd.in/gdXVMMVp

39. Reconstruct Itinerary: https://lnkd.in/ga2KSv4h

40. Maximum Profit in Job Scheduling: https://lnkd.in/gb_qP8vA

41. Cheapest Flights Within K Stops: https://lnkd.in/grHsBbR6

42. Stock Price Fluctuation: https://lnkd.in/g4yuZgQF

43. Subarray Sum Equals K: https://lnkd.in/gbxm_NXC

44. Delete Nodes And Return Forest: https://lnkd.in/g6Xx3uc7

45. Coin Change II: https://lnkd.in/gYhka_-y

46. Clone Graph: https://lnkd.in/gMqAMeSv

47. Rotate Image: https://lnkd.in/gBny5AMK

48. Convert Sorted Array to Binary Search Tree: https://lnkd.in/gT7tm5fJ

49. Process Tasks Using Servers: https://lnkd.in/gMYbjGWB

50. Min Stack: https://lnkd.in/gPCwDHiT

#######################################################################

1. Container With Most Water : https://lnkd.in/dG9rhcjm

2. Wildcard Matching : https://lnkd.in/drHqJ4nB

3. Jump Game II : https://lnkd.in/dgJUeCCU

4. Jump Game : https://lnkd.in/dQv3_csV

5. Best Time to Buy and Sell Stock II : https://lnkd.in/d4Qka-G9

6. Gas Station : https://lnkd.in/d94cqhqc

7. Candy : https://lnkd.in/d_hh4z8i

8. Largest Number : https://lnkd.in/dcV264Jh

9. Meeting Rooms II : https://lnkd.in/dsb4AcxQ

10. Find the Celebrity : https://lnkd.in/dy643udY

11. Wiggle Sort : https://lnkd.in/dAAP5KfE

12. Remove Duplicate Letters : https://lnkd.in/djVh9SkE

13. Create Maximum Number : https://lnkd.in/dr_EjH6c

14. Patching Array : https://lnkd.in/dJHJp4hx

15. Increasing Triplet Subsequence : https://lnkd.in/dTp3hfrk

16. Rearrange String k Distance Apart : https://lnkd.in/dMbHn47t

17. Wiggle Subsequence : https://lnkd.in/d8Jbpuwg

18. Integer Replacement : https://lnkd.in/daaF7c4Z

19. Remove K Digits : https://lnkd.in/dVz2vix7

20. Queue Reconstruction by Height : https://lnkd.in/dVArqsw5

21. Longest Palindrome : https://lnkd.in/dEfwccGX

22. Split Array Largest Sum : https://lnkd.in/dwCA-A59

23. Strong Password Checker : https://lnkd.in/dfwtNC-E

24. Non-overlapping Intervals : https://lnkd.in/d-82nneU

25. Minimum Number of Arrows to Burst Balloons : https://lnkd.in/di6-Z9yK

############################################################################
1) When you need a single instance of a class that's globally accessible.

Example -> Database connections: Ensures only one connection throughout the app's life.

2)When you need to construct complex objects step by step.

Example -> Meal Builder: Create a builder for building customized meals with appetizers, main courses, sides, and desserts.

3) When you need to make an interface of one class compatible with another class.

Example -> Payment Gateway Integration: Adapt various payment gateways (PayPal, Stripe, Square) to a common interface for processing transactions.

4) When you want to create objects but leave the exact type to be determined by the subclasses.

Example -> Notification Services: Create a factory method to produce notifications (email, SMS, push notifications) depending on the audience and content.

5) When you want to create new objects by copying an existing object, known as the prototype.

Example -> Game Character Cloning: Duplicate game characters with different attributes.

6) When you want to add new functionalities to an object dynamically without altering its structure.

Example -> Text Formatting: Add formatting like bold, italic, and underline to text.

7) When you need one-to-many dependency between objects, so when one object changes state, its dependents are notified and updated automatically.

Example -> Weather Station: Broadcast weather changes to various devices.

8) When you want to define a family of algorithms, encapsulate each one, and make them interchangeable.

Example -> Sorting Algorithms: Swap sorting strategies (quicksort, mergesort) at runtime.

9)When you want to compose objects into tree structures to represent part-whole hierarchies.

Example -> Hierarchical menu: Organizationâ€™s structure.

10)When you want to make your system easy to use by providing a simplified interface to a set of interfaces in a subsystem.

Example -> Home Automation: Control smart devices (lights, thermostats) through one interface.

###############################################################################

Add Binary
Diameter of Binarytree
Valid anagram
Binary Search
Longest Pallindrome
Lowest Common Ancester of a binary Search tree
Flood fill
Balance BT
Linked List Cycle
First bad version
Perumation - Given arr of distinct integer, return all possible permuations 
Merge Interval
Container with most water
Kth Smallest Element in a BST
K CLosest Points to Origin
Longest Substring without Repeating Character
3 Sum
BT level order traversal
STring to integer(atoi)
Spiral matrix
Course schedule
Trie
Clone Graph
Evaluate Reverse Polish Notation
Find median from data stream
Word ladder
Basic Calculator
Mx profit job scheduling
Merge K srted Llist
Largest Rectangle in Histogram


#######################################################################################

1- Sliding Window - https://lnkd.in/g46KCQFt and https://lnkd.in/gUv-V5CF

2- Backtracking: https://lnkd.in/gAUFSjuJ

3- Greedy Algorithm: https://lnkd.in/g5TH7mhj

4- Binary Search - https://lnkd.in/gdtFr6KU and https://lnkd.in/g8U5cDbZ

5- UMPIRE Interview Strategy - https://lnkd.in/gugBCQV8

6- Trie - https://lnkd.in/ghUxvn2z

7- Dynamic Programming - https://lnkd.in/gKduCryi

8- Two Pointers - https://lnkd.in/guN_NZ-x

9- Coding Patterns - https://lnkd.in/gWnUKwu2 and https://lnkd.in/gYqhrH6f

10- Island Pattern - https://lnkd.in/gb-k2dhW

11- Interval Merge: https://lnkd.in/gtSsv3dA

12- System Design Template and Strategy: https://lnkd.in/gheCSgZ9 and https://lnkd.in/gYZKYGJN


#####################################################################################

https://github.com/ashishps1/awesome-system-design-resources/blob/main/README.md#system-design-interview-problems

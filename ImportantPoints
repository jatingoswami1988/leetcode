To Read again
// Read Overlapping problem and Recursion technique in takeUForward
// Time complexity in each example of striver
// in recursion if min is required then -> return Math.min( , );
// in recursion if max is required then -> return Math.max( , );
// in recursion total count is required then -> return f(i,j) + f(i,j) -> depending upon the question.

https://github.com/keshavsethi/LLD/blob/main/BookMyShow/BMSService.java

BitManipulation
Puzzles

Logic -

Array - Two Pointer,Sliding Window,PriorityQueue,TempArray , If Array sorted (BinarySearch or Two Pointers)
PriorityQueue
Custom Class

Frameworks - 

Spring Retry Example

#######################

To Revise Again
https://leetcode.com/problems/single-number/ --> Try XOR Operation method also
560,556,556
https://leetcode.com/problems/minimum-number-of-swaps-to-make-the-string-balanced/
https://leetcode.com/problems/count-the-number-of-fair-pairs/

Pending -

https://leetcode.com/problems/rearrange-array-elements-by-sign/description/

#######################

Fizzbuzz problem.
Segemented Tree
Self Balanced Tree - AVL Tree
Nuember Theory - Basics
DP on Tree
Fenwick Tree
Expected Value Question
SOS Dp
Heavy Light Decomposition
Fourier Theoram
Skewed Tree
segmented tree
https://www.geeksforgeeks.org/segment-tree-set-1-range-minimum-query/

######################
All Problems :-
Leetcode Problems - https://www.linkedin.com/feed/update/urn:li:activity:7067002527166181377/

DynamicProblem :-
https://leetcode.com/discuss/general-discussion/1050391/Must-do-Dynamic-programming-Problems-Category-wise
https://leetcode.com/discuss/general-discussion/491522/dynamic-programming-questions-thread
https://leetcode.com/tag/dynamic-programming/discuss/1000929/Solved-all-dynamic-programming-(dp)-problems-in-7-months.
Dynamic Programming - https://www.geeksforgeeks.org/top-20-dynamic-programming-interview-questions/?ref=lbp

String :- 
https://leetcode.com/discuss/interview-question/2001789/collections-of-important-string-questions-pattern

##########################

HLD and LLD

Distributed Caching and MessagingQueue
Netflix System Design > https://workat.tech/system-design/article/best-engineering-blogs-articles-videos-system-design-tvwa05b8bzzr
Elevator System design > https://leetcode.com/discuss/interview-question/124660/design-an-Elevator
LRU cache with Thread safe > https://github.com/kswap/LRU-Cache
https://www.codekarle.com/
Web Crawler - https://github.com/donnemartin/system-design-primer/blob/master/solutions/system_design/web_crawler/README.md
https://www.geeksforgeeks.org/must-do-coding-questions-for-companies-like-amazon-microsoft-adobe/
https://workat.tech/system-design/article/best-engineering-blogs-articles-videos-system-design-tvwa05b8bzzr
https://leetcode.com/discuss/interview-question/124660/design-an-Elevator
LRU cache with Thread safe > https://github.com/kswap/LRU-Cache
System Design > https://www.codekarle.com/
Web Crawler > https://github.com/donnemartin/system-design-primer/blob/master/solutions/system_design/web_crawler/README.md

###########################

Microservice Pattern

𝟏. 𝐁𝐚𝐜𝐤𝐞𝐧𝐝𝐬 𝐟𝐨𝐫 𝐅𝐫𝐨𝐧𝐭𝐞𝐧𝐝𝐬 𝐏𝐚𝐭𝐭𝐞𝐫𝐧 (𝐁𝐅𝐅): Tailored backend for each user interface.
𝟐. 𝐒𝐭𝐫𝐚𝐧𝐠𝐥𝐞𝐫 𝐅𝐢𝐠 𝐏𝐚𝐭𝐭𝐞𝐫𝐧: Gradual replacement of monolithic systems.
𝟑. 𝐀𝐏𝐈 𝐆𝐚𝐭𝐞𝐰𝐚𝐲 𝐏𝐚𝐭𝐭𝐞𝐫𝐧: Single-entry point to microservices system.
𝟒. 𝐒𝐞𝐫𝐯𝐢𝐜𝐞 𝐃𝐢𝐬𝐜𝐨𝐯𝐞𝐫𝐲 𝐏𝐚𝐭𝐭𝐞𝐫𝐧: Locate services dynamically in a network.
𝟓. 𝐂𝐢𝐫𝐜𝐮𝐢𝐭 𝐁𝐫𝐞𝐚𝐤𝐞𝐫 𝐏𝐚𝐭𝐭𝐞𝐫𝐧: Prevent cascaded failure, enable recovery.
𝟔. 𝐁𝐮𝐥𝐤𝐡𝐞𝐚𝐝 𝐏𝐚𝐭𝐭𝐞𝐫𝐧: Isolate failures and prevent system-wide impact.
𝟕. 𝐑𝐞𝐭𝐫𝐲 𝐏𝐚𝐭𝐭𝐞𝐫𝐧: Reattempt operation in case of failure.
𝟖. 𝐒𝐢𝐝𝐞𝐜𝐚𝐫 𝐏𝐚𝐭𝐭𝐞𝐫𝐧: Application extension with helper services.
𝟗. 𝐒𝐚𝐠𝐚 𝐏𝐚𝐭𝐭𝐞𝐫𝐧: Maintain data consistency across microservices.
𝟏𝟎. 𝐂𝐐𝐑𝐒 (𝐂𝐨𝐦𝐦𝐚𝐧𝐝 𝐐𝐮𝐞𝐫𝐲 𝐑𝐞𝐬𝐩𝐨𝐧𝐬𝐢𝐛𝐢𝐥𝐢𝐭𝐲 𝐒𝐞𝐠𝐫𝐞𝐠𝐚𝐭𝐢𝐨𝐧) 𝐏𝐚𝐭𝐭𝐞𝐫𝐧: Separate read and write operations.
𝟏𝟏. 𝐂𝐨𝐦𝐩𝐨𝐬𝐢𝐭𝐞 𝐌𝐢𝐜𝐫𝐨𝐬𝐞𝐫𝐯𝐢𝐜𝐞𝐬 𝐏𝐚𝐭𝐭𝐞𝐫𝐧: Orchestrates multiple services, aggregates results.
𝟏𝟐. 𝐂𝐨𝐧𝐟𝐢𝐠𝐮𝐫𝐚𝐭𝐢𝐨𝐧 𝐄𝐱𝐭𝐞𝐫𝐧𝐚𝐥𝐢𝐳𝐚𝐭𝐢𝐨𝐧 𝐏𝐚𝐭𝐭𝐞𝐫𝐧: Externalize configurations for environmental consistency.


############################

75 Questions Grind
https://lnkd.in/d_uWUggG

Famous 75 Questions of Leetcode
https://lnkd.in/d2ZxbtRw

###########################

https://leetcode.com/discuss/general-discussion/1050391/Must-do-Dynamic-programming-Problems-Category-wise
https://leetcode.com/discuss/study-guide/1308617/Dynamic-Programming-Patterns
Make Sure these all problems and their concepts, logic, Pattern Everything is on your Fingertip before the Interview.

//// count no of ways or best way | min output or max output - Recursion.
/// Represent the problem in terms of index
/// do possible stuffs in that index
/// count no of ways  - Sum all stuffs
/// min - find min of all stuffs
/// max - find max of all stuffs

🔴 Part 1: DP on 1D Array

DP 1. Phebonachi Number
DP 2. Climbing Stairs 
DP 3. Frog Jump 
DP 4. Frog Jump with K Distance 
DP 5. Maximum Sum of Non-Adjacent Elements House Robber - done
DP 6. House Robber 2 - done

🔴 Part 2: 2D/3D DP and DP on Grids

DP 7. Ninja's Training - 
DP 8. Grid Unique Paths - Done
DP 9. Unique Paths 2 - Done
DP 10. Minimum Path Sum in Grid - Done
DP 11. Triangle Fixed Starting Point and Variable Ending Point DP on GRIDS- Done
DP 12. Minimum Maximum Falling Path Sum Variable Starting and Ending Points DP on Grids
DP 13. Cherry Pickup II 3D DP

🔴 Part 3: DP on Subsequences

DP 14. Subset Sum Equals to Target - Done
DP 15. Partition Equal Subset Sum - Done
Dp 16. Partition A Set Into Two Subsets With Minimum Absolute Sum Difference - (Tug of war problem)
DP 17. Counts Subsets with Sum K - (coin change problem)
DP 18. Count Partitions With Given Difference 
DP 19. 0/1 Knapsack Single Array
DP 20. Minimum Coins ---> Combinational Sum problem 
DP 21. Target Sum DP on Subsequences
DP 22. Coin Change 2 infinite Supply Problems DP on Subsequences
DP 23. Unbounded Knapsack 1-D Array
DP 24. Rod Cutting Problem 1D Array

🔴 Part 4: DP on Strings

DP 25 Longest Common Subsequence - Done
DP 26. Print_Longest_Common_Subsequence - Done
DP 27._Longest_Common_Substring - Done
DP 28._Longest_Palindromic_Subseque - Done
DP 29._Minimum_Insertions_to_Make_String_Palindrome - Done
DP 30._Minimum_Insertions_Deletions_to_Convert_String_A_to_String_B - Done
DP 31._Shortest_Common_Supersequence
DP 32. Distinct_Subsequences_1D_Array - Done
DP 33 Edit_Distance - Done
DP 34._Wildcard_Matching

🔴 Part 5: DP on Stocks

DP 35._Best_Time_to_Buy_and_Sell_Stock -done
DP 36._Buy_and_Sell_Stock_II-done
DP 37._Buy_and_Sell_Stocks_III-done
DP 38. Buy and Stock Sell IV
DP 39. Buy and Sell Stocks With Cooldown-done
DP 40. Buy and Sell Stocks With Transaction Fee-done

🔴 Part 6: DP on LIS ( Longest Increasing Subsequence )

DP 41. Longest Increasing Subsequence - done
DP 42. Printing Longest Increasing Subsequence - done
DP 44. Largest Divisible Subset Longest Increasing Subsequence
DP 45. Longest String Chain Longest Increasing Subsequence LIS
DP 46. Longest Bitonic Subsequence LIS
DP 47. Number of Longest Increasing Subsequences

🔴 Part 7: MCM (Matrix Chain Multiplication) DP | Partition DP

DP 48. Matrix Chain Multiplication MCM Partition - Done
DP 49. Matrix Chain Multiplication - Done
DP 50. Minimum Cost to Cut the Stick - Done
DP 51. Burst Balloons Partition DP Interactive G-Meet Session Update
DP 52. Evaluate Boolean Expression to True Partition DP
DP 53. Palindrome Partitioning - II Front Partition 🔥
DP 54. Partition Array for Maximum Sum Front Partition 🔥

🔴 Part 8: DP on Squares

DP 55. Maximum Rectangle Area with all 1's - Done
DP 56. Count Square Submatrices with All Ones - Done

###########################

👉System design basics: https://bit.ly/3SuUR0Y
👉Horizontal and vertical scaling: https://bit.ly/3slq5xh
👉 Load balancing and Message queues: https://bit.ly/3sp0FP4
👉High-level design and low-level design, Consistent Hashing, Monolithic and Microservices architecture: https://bit.ly/3DnEfEm
👉 Caching, Indexing, Proxies: https://bit.ly/3SvyVDc
👉 Networking, How Browsers work, Content Network Delivery ( CDN): https://bit.ly/3TOHQRb
👉 Database Sharding, CAP Theorem, Database schema Design: https://bit.ly/3CZtfLN
👉 Concurrency, API, Components + OOP + Abstraction : https://bit.ly/3sqQrhj
👉 Estimation and Planning, Performance: https://bit.ly/3z9dSPN
👉 Map Reduce, Patterns, and Microservices: https://bit.ly/3zcsfmv
👉 SQL vs NoSQL and Cloud: https://bit.ly/3z8Aa49
👉 Most Popular System Design Questions: https://bit.ly/3Dp40Ux
✅ System Design Case Studies
👉 Design Netflix: https://bit.ly/3GrAUG1
👉 Design Reddit: https://bit.ly/3OgGJrL
👉 Design Messenger App : https://bit.ly/3DoAAXi
👉 Design Instagram: https://bit.ly/3BFeHlh
👉 Design Dropbox: https://bit.ly/3SnhncU
👉 Design Youtube: https://bit.ly/3dFyvvy
👉 Design Tinder: https://bit.ly/3Mcyj3X
👉 Design Yelp: https://bit.ly/3E7IgO5
👉 Design Whatsapp: https://bit.ly/3M2GOhP
👉 Design URL shortener : https://bit.ly/3xP078x
👉 Design Amazon Prime Video: https://bit.ly/3hVpWP4
👉 Design Twitter: https://bit.ly/3qIG9Ih
👉 Design Uber: https://bit.ly/3fyvnlT
👉 Design TikTok : https://bit.ly/3UUlKxP
👉 Design Facebook's Newsfeed: https://bit.ly/3RldaW7
👉 Design Web Crawler: https://bit.ly/3DPZTBB
👉 Design API Rate Limiter: https://bit.ly/3BIVuh7
✅ All solved case studies: https://bit.ly/3dCG1rc
👉 System Design Important terms - https://bit.ly/3Om9d3H
👉 Most Popular System Design Questions: https://bit.ly/3E9oH7K
👉 Complete System Design Basics Series: https://bit.ly/3rG1cfr

#################################################################

25 concepts that make System Design easier:
1. Scalability - How will your system handle growth? Vertical or Horizontal scaling?
2. Latency and Throughput - Essential performance measures.
3. Database design - SQL or NoSQL? Understand their strengths and weaknesses.
4. Indexing - Understand database indexes and their performance implications.
5. Load Balancing - Understand different algorithms and their use cases.
6. Caching - Caching can dramatically increase the speed of data retrieval. Know different strategies, benefits and trade-offs.
7. Networking Basics - TCP/IP, HTTP vs HTTPS, UDP, DNS lookups.
8. Microservices Architecture - Learn how to decompose a large system into manageable parts.
9. Data Sharding - As your data grows, how will you distribute it?Understand different sharding techniques and their trade-offs.
10. CAP Theorem - Consistency, Availability, and Partition Tolerance - you can only pick two.
11. System Interfaces - API design and best practices.
12. Redundancy and Failover - Learn how to design a highly available system.
13. Message Queues - Asynchronous communication, ensuring reliable data transfer.
14. Data Replication - Storing duplicate data across multiple machines to increase reliability and availability.
15. Concurrency - Handling multiple requests simultaneously.
16. Multithreading - The art of handling multiple threads and synchronization.
17. Rate Limiting - Controlling request rates, why, and how.
18. Consensus Algorithms - Get familiar with Raft, Paxos, and more.
19. Idempotency - Repeated requests should yield the same result.
20. REST vs RPC - When and why to use them.
21. Polling vs Push mechanism - Differences and their appropriate usage.
22. Heartbeats - Regular signals sent between machines to indicate network connectivity and system health.
23. Eventual vs Strong Consistency - Trade-offs and use cases.
24. Logging and Monitoring - Their significance in maintaining a healthy system.
25. Circuit Breakers - Learn how they can prevent system failures.
